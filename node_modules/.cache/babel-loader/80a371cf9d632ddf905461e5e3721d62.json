{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zetub\\\\Documents\\\\React\\\\desafio-diobank\\\\src\\\\pages\\\\Conta.tsx\",\n  _s = $RefreshSig$();\nimport { Center, SimpleGrid, Spinner } from \"@chakra-ui/react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { api } from \"../api\";\nimport CardInfo from \"../components/CardInfo\";\nimport { AppContext } from \"../components/AppContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Conta = () => {\n  _s();\n  const [userData, setUserData] = useState();\n  const context = useContext(AppContext);\n  console.log('retorno da página conta', context);\n  useEffect(() => {\n    const getData = async () => {\n      const data = await api;\n      setUserData(data);\n    };\n    getData();\n  }, []); //parar função async\n\n  const actualData = new Date();\n\n  //console.log(userData?.name)\n\n  const {\n    id\n  } = useParams();\n  const navigate = useNavigate();\n  if (userData && id !== userData.id) {\n    // se userData for carregado corretamente (diferente de null) e o id inserido for diferente do userData.id definido pelo api, então será redirecionado para a página inicial\n    navigate('/');\n  }\n  return /*#__PURE__*/_jsxDEV(Center, {\n    children: /*#__PURE__*/_jsxDEV(SimpleGrid, {\n      columns: 2,\n      spacing: 8,\n      paddingTop: \"16px\",\n      children: userData === null || userData === undefined ? /*#__PURE__*/_jsxDEV(Center, {\n        children: /*#__PURE__*/_jsxDEV(Spinner, {\n          size: \"xl\",\n          color: \"white\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 33\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 29\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(CardInfo, {\n          mainContent: `Bem vindo ${userData === null || userData === void 0 ? void 0 : userData.name}`,\n          content: `${actualData === null || actualData === void 0 ? void 0 : actualData.getDay()} / ${actualData === null || actualData === void 0 ? void 0 : actualData.getMonth()} / ${actualData === null || actualData === void 0 ? void 0 : actualData.getFullYear()} / ${actualData === null || actualData === void 0 ? void 0 : actualData.getHours()}:${actualData === null || actualData === void 0 ? void 0 : actualData.getMinutes()}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(CardInfo, {\n          mainContent: \"Saldo\",\n          content: `R$ ${userData === null || userData === void 0 ? void 0 : userData.balance}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n_s(Conta, \"nFoxiisuNEDjHvFEdO4zL7wNjTA=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = Conta;\nexport default Conta;\nvar _c;\n$RefreshReg$(_c, \"Conta\");","map":{"version":3,"names":["Center","SimpleGrid","Spinner","useParams","useNavigate","useContext","useEffect","useState","api","CardInfo","AppContext","Conta","userData","setUserData","context","console","log","getData","data","actualData","Date","id","navigate","undefined","name","getDay","getMonth","getFullYear","getHours","getMinutes","balance"],"sources":["C:/Users/zetub/Documents/React/desafio-diobank/src/pages/Conta.tsx"],"sourcesContent":["import { Center, SimpleGrid, Spinner } from \"@chakra-ui/react\"\r\nimport { useParams, useNavigate } from \"react-router-dom\"\r\nimport { useContext, useEffect, useState } from \"react\"\r\nimport { api } from \"../api\"\r\nimport CardInfo from \"../components/CardInfo\"\r\nimport { AppContext } from \"../components/AppContext\"\r\n\r\ninterface UserData {\r\n    email: string\r\n    password: string\r\n    name: string,\r\n    balance: number,\r\n    id: string\r\n}\r\n\r\nconst Conta = () =>{\r\n    const [userData, setUserData] = useState<null | UserData>()\r\n\r\n    const context = useContext(AppContext)\r\n    console.log('retorno da página conta', context)\r\n\r\n    useEffect(() =>{\r\n        const getData = async () => {\r\n            const data: any | UserData = await api\r\n            setUserData(data)\r\n        }\r\n        getData()\r\n    }, []) //parar função async\r\n\r\n    const actualData = new Date()\r\n\r\n    //console.log(userData?.name)\r\n\r\n    \r\n\r\n    const {id} = useParams()\r\n    const navigate = useNavigate()\r\n    if(userData && id !== userData.id){ // se userData for carregado corretamente (diferente de null) e o id inserido for diferente do userData.id definido pelo api, então será redirecionado para a página inicial\r\n        navigate('/')\r\n    }\r\n    return (\r\n        <Center>\r\n            <SimpleGrid columns={2} spacing={8} paddingTop='16px'>\r\n                {\r\n                    userData === null || userData === undefined\r\n                        ? (\r\n                            <Center>\r\n                                <Spinner size='xl' color='white' />\r\n                            </Center>\r\n                        ) :\r\n                        <>\r\n                        <CardInfo mainContent={`Bem vindo ${userData?.name}`} content={`${actualData?.getDay()} / ${actualData?.getMonth()} / ${actualData?.getFullYear()} / ${actualData?.getHours()}:${actualData?.getMinutes()}`} />\r\n                        <CardInfo mainContent = 'Saldo' content = {`R$ ${userData?.balance}`}/>\r\n                        </>\r\n                }\r\n            </SimpleGrid>\r\n        </Center>\r\n    )\r\n}\r\n\r\nexport default Conta"],"mappings":";;AAAA,SAASA,MAAM,EAAEC,UAAU,EAAEC,OAAO,QAAQ,kBAAkB;AAC9D,SAASC,SAAS,EAAEC,WAAW,QAAQ,kBAAkB;AACzD,SAASC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACvD,SAASC,GAAG,QAAQ,QAAQ;AAC5B,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,SAASC,UAAU,QAAQ,0BAA0B;AAAA;AAAA;AAUrD,MAAMC,KAAK,GAAG,MAAK;EAAA;EACf,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,EAAmB;EAE3D,MAAMO,OAAO,GAAGT,UAAU,CAACK,UAAU,CAAC;EACtCK,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEF,OAAO,CAAC;EAE/CR,SAAS,CAAC,MAAK;IACX,MAAMW,OAAO,GAAG,YAAY;MACxB,MAAMC,IAAoB,GAAG,MAAMV,GAAG;MACtCK,WAAW,CAACK,IAAI,CAAC;IACrB,CAAC;IACDD,OAAO,EAAE;EACb,CAAC,EAAE,EAAE,CAAC,EAAC;;EAEP,MAAME,UAAU,GAAG,IAAIC,IAAI,EAAE;;EAE7B;;EAIA,MAAM;IAACC;EAAE,CAAC,GAAGlB,SAAS,EAAE;EACxB,MAAMmB,QAAQ,GAAGlB,WAAW,EAAE;EAC9B,IAAGQ,QAAQ,IAAIS,EAAE,KAAKT,QAAQ,CAACS,EAAE,EAAC;IAAE;IAChCC,QAAQ,CAAC,GAAG,CAAC;EACjB;EACA,oBACI,QAAC,MAAM;IAAA,uBACH,QAAC,UAAU;MAAC,OAAO,EAAE,CAAE;MAAC,OAAO,EAAE,CAAE;MAAC,UAAU,EAAC,MAAM;MAAA,UAE7CV,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAKW,SAAS,gBAEnC,QAAC,MAAM;QAAA,uBACH,QAAC,OAAO;UAAC,IAAI,EAAC,IAAI;UAAC,KAAK,EAAC;QAAO;UAAA;UAAA;UAAA;QAAA;MAAG;QAAA;QAAA;QAAA;MAAA,QAC9B,gBAEb;QAAA,wBACA,QAAC,QAAQ;UAAC,WAAW,EAAG,aAAYX,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEY,IAAK,EAAE;UAAC,OAAO,EAAG,GAAEL,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEM,MAAM,EAAG,MAAKN,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEO,QAAQ,EAAG,MAAKP,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEQ,WAAW,EAAG,MAAKR,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAES,QAAQ,EAAG,IAAGT,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEU,UAAU,EAAG;QAAE;UAAA;UAAA;UAAA;QAAA,QAAG,eAC/M,QAAC,QAAQ;UAAC,WAAW,EAAG,OAAO;UAAC,OAAO,EAAK,MAAKjB,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEkB,OAAQ;QAAE;UAAA;UAAA;UAAA;QAAA,QAAE;MAAA;IACpE;MAAA;MAAA;MAAA;IAAA;EAEF;IAAA;IAAA;IAAA;EAAA,QACR;AAEjB,CAAC;AAAA,GA3CKnB,KAAK;EAAA,QAoBMR,SAAS,EACLC,WAAW;AAAA;AAAA,KArB1BO,KAAK;AA6CX,eAAeA,KAAK;AAAA;AAAA"},"metadata":{},"sourceType":"module"}